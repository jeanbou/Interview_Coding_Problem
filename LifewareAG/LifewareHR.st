Object subclass: #Car	instanceVariableNames: 'carDetailedName price days startDate'	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Core'!!Car commentStamp: 'VincentBlondeau 3/25/2019 10:12' prior: 0!exercises.!!Car methodsFor: 'accessor' stamp: 'IvanBudnyk 12/6/2021 21:26'!days: sDays	days := sDays! !!Car methodsFor: 'accessor' stamp: 'IvanBudnyk 12/7/2021 08:53'!price: aPrice	price := aPrice! !!Car methodsFor: 'accessor' stamp: 'LWhr 3/28/2017 14:47'!price	^ price! !!Car methodsFor: 'accessor' stamp: 'IvanBudnyk 12/6/2021 21:25'!days	^ days! !!Car methodsFor: 'accessing' stamp: 'IvanBudnyk 12/7/2021 09:03'!startDate: aDate	startDate := aDate! !!Car methodsFor: 'accessing' stamp: 'IvanBudnyk 12/7/2021 13:13'!carDetailedName	^ carDetailedName! !!Car methodsFor: 'accessing' stamp: 'IvanBudnyk 12/7/2021 09:02'!startDate	^ startDate! !!Car methodsFor: 'accessing' stamp: 'IvanBudnyk 12/7/2021 13:15'!carDetailedName: aName	carDetailedName :=  aName! !!Car methodsFor: 'initialization' stamp: 'LWhr 3/28/2017 14:48'!setPrice: aPrice	price := aPrice! !!Car methodsFor: 'initialization' stamp: 'IvanBudnyk 12/6/2021 21:25'!setDays: sDays	days := sDays! !!Car methodsFor: 'initialization' stamp: 'IvanBudnyk 12/7/2021 09:04'!setStartDate: aDate	startDate := aDate! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Car class	instanceVariableNames: ''!!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:48'!price: aPrice	^ self new setPrice: aPrice! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:51'!tesla	^ self price: 400! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:50'!panda	^ self price: 50! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 15:17'!golf	^ self price: 100! !Object subclass: #CarRental	instanceVariableNames: 'cars rented'	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Core'!!CarRental commentStamp: 'VincentBlondeau 3/25/2019 10:12' prior: 0!commentStamp: 'LWhr 3/28/2017 14:51' prior: 0!!CarRental methodsFor: 'initialization' stamp: 'IvanBudnyk 12/6/2021 19:48'!initialize	super initialize.	cars := OrderedCollection new.	super initialize.	rented := OrderedCollection new.! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/6/2021 19:49'!availableCars  ^cars copyWithoutAll: rented! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/6/2021 21:01'!rent: aCar days: anInteger  "days are not used, but it is in test case however not specified"  rented add: aCar! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/7/2021 11:25'!isCarRented: aCar startDate: aDate days: anInteger	^ ( ( ( ( aCar startDate + aCar days ) < aDate ) ) | ( aDate + anInteger < aCar startDate ) & (cars includes: aCar) )! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/7/2021 12:01'!totalCars	^cars! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/6/2021 21:20'!priceFor: aCar days: anInteger	| price |	price := 	anInteger >= 4		ifTrue: [ ( aCar price * ( 3 + ( 0.9 * ( anInteger - 3) ) ) ) ]		ifFalse: [ aCar price * anInteger ].		^ price! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/6/2021 19:06'!addCar: aCar	cars add: aCar! !!CarRental methodsFor: 'action' stamp: 'IvanBudnyk 12/6/2021 19:28'!rentedCars  ^rented! !!CarRental methodsFor: 'printing' stamp: 'IvanBudnyk 12/7/2021 14:19'!printAvailableCarsForPeriod: startDate days: durationDays    | discontClientMsg availableCars discountInEurPerDay|	 "One can change later and add it as an incoming parameter"	 discountInEurPerDay := 10.    discontClientMsg := 'Discount of 10 euros per day is already included in our price'.	 "I added aditional condition rice > discountInEurPerDate as I do not want to provide it for free or even pay a customer for rent in case if somebody put a wrong price in DB like 5 eur instead of 50: i.e. 5 - 10, I have to pay 5 eur to customer for rent. No way!!"	 availableCars := cars select: [ :each | ( (each price > discountInEurPerDay) & (( ( ( each startDate + each days ) < startDate ) ) | ( startDate + durationDays < each startDate )) ). ]. "In contrary to isCarRented method, this second condition does not need to check the presence inside the list, so less condition"	 Transcript show: 'The list of available cars:'; cr.	 availableCars do: [ :element | Transcript show: element carDetailedName. Transcript show: ' . Its renting price is '. Transcript show: element price - discountInEurPerDay. Transcript show: ' eur/day'; cr ].	 ^ discontClientMsg ! !TestCase subclass: #CarRentalTest	instanceVariableNames: 'totalCars'	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Tests'!!CarRentalTest commentStamp: 'VincentBlondeau 3/25/2019 10:13' prior: 0!'<historical>' prior: 0!!CarRentalTest methodsFor: '1 warming up exercise' stamp: 'IvanBudnyk 12/6/2021 18:33'!testTeslaPrice	| tesla |	tesla := Car tesla.	self assert: tesla price equals: 400! !!CarRentalTest methodsFor: '1 warming up exercise' stamp: 'IvanBudnyk 12/6/2021 18:32'!testRentTesla	| carTeslaRental myTesla |	carTeslaRental := CarRental new.	myTesla := Car tesla.	self assert: (carTeslaRental priceFor: myTesla days: 3) equals: 1200! !!CarRentalTest methodsFor: '2 exercise' stamp: 'VincentBlondeau 3/22/2019 14:42'!testDiscountedPrice	"Starting from the 4th day, the customer gets a rebate of 10% on the daily rate"	"extend the code to make this test green"	| carRental myGolf |	carRental := CarRental new.	myGolf := Car golf.	self assert: (carRental priceFor: myGolf days: 4) equals: 390! !!CarRentalTest methodsFor: '1.1 examples ' stamp: 'VincentBlondeau 3/22/2019 14:42'!testBooleanCondition	| counter |	counter := OrderedCollection new.	1 > 0		ifTrue: [ counter add: 1 ]		ifFalse: [ counter add: 2 ].	self assert: counter first equals: 1! !!CarRentalTest methodsFor: '0 examples' stamp: 'VincentBlondeau 3/22/2019 14:42'!testPandaPrice	| panda |	panda := Car panda.	self assert: panda price equals: 50! !!CarRentalTest methodsFor: '0 examples' stamp: 'VincentBlondeau 3/22/2019 14:42'!testRentPanda	| carRental myPanda |	carRental := CarRental new.	myPanda := Car panda.	self assert: (carRental priceFor: myPanda days: 3) equals: 150! !!CarRentalTest methodsFor: '3 exercise' stamp: 'VincentBlondeau 3/22/2019 14:43'!testRenting	"The same car cannot be rented twice. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental redPanda yellowPanda blackTesla |	carRental := CarRental new.	redPanda := Car panda.	yellowPanda := Car panda.	blackTesla := Car tesla.	carRental		addCar: redPanda;		addCar: yellowPanda;		addCar: blackTesla.	self assert: carRental availableCars size equals: 3.	carRental rent: redPanda days: 5.	self assert: carRental availableCars size equals: 2.	self assert: carRental rentedCars size equals: 1! !!CarRentalTest methodsFor: '3 exercise' stamp: 'VincentBlondeau 3/22/2019 14:42'!testFixedNumberOfCars	"Our car rental has now a fixed number of cars. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental |	carRental := CarRental new.	carRental		addCar: Car panda;		addCar: Car panda;		addCar: Car tesla.	self assert: carRental totalCars size equals: 3! !!CarRentalTest methodsFor: '4 exercise' stamp: 'IvanBudnyk 12/7/2021 13:32'!testRentingWithDates	"Extend the code and write a test for the following scenario: Our car rentals has 3, 2 tesla and 1 golf. Customer Bob call our service asking for a golf for 5 days starting on the 1st of April. Unfortunately the golf is already rented up to the 3rd of april. Our service tells Bob that we have two available teslas, and that they can provide an individual discount of 10 euros per day. Our informatic system should offer the functionalities to sustain the above scenario, for example it should know whether the panda is free in the requested period and so on...write test case(s) and code to simulate this scenario"	| carRental redTesla blackTesla blueGolf bobStartingDate bobRentDurationInDays greenPanda aDicsountRelatedMessage |	carRental := CarRental new.	"Initialializing our car park with 2 non-rented yet Teslas and 1 rented Golf"	redTesla := Car tesla.	blackTesla := Car tesla.	blueGolf := Car golf.	"Green panda is not in our renting cars park, but we will use it for additional non-regression test"	greenPanda := Car panda.	redTesla days: 0.	redTesla carDetailedName: 'Red Tesla Model S'.	redTesla startDate: (Date newDay: 1 month: 1 year: 2016). "Not rented since the moment when we bought"	blackTesla days: 0.	blackTesla carDetailedName: 'Black Tesla Model Y'.	blackTesla startDate: (Date newDay: 1 month: 1 year: 2016).	"Blue Golf is rented for 3 days starting from 2020-04-01"	blueGolf days: 3.	blueGolf carDetailedName: 'Blue Golf 8'.	blueGolf startDate: (Date newDay: 1 month: 4 year: 2020).	carRental		addCar: redTesla;		addCar: blackTesla;		addCar: blueGolf.	greenPanda days: 0.	greenPanda startDate: (Date newDay: 1 month: 1 year: 1970).	"Check: total cars in our rental park. Note: it is not the same as aval. for renting cars"	self  assert: carRental availableCars size equals: 3.	bobStartingDate := (Date newDay: 1 month: 4 year: 2020). "When Bob wants to start"	bobRentDurationInDays := 5.	"Check: the same blue golf that we have in our car park but with Bobs renting parameters"	self assert: (carRental isCarRented: blueGolf startDate: bobStartingDate days: bobRentDurationInDays) equals: false.	"Doublecheck: a wished green panda car is not in the list to rent, because it is out of our park however the dates range is OK"	self assert: (carRental isCarRented: greenPanda startDate: (Date newDay: 5 month: 5 year: 2020) days: bobRentDurationInDays) equals: false.	"Check: But if Bob wants to rent blue golf in May, his golf should be free for it = true"	self assert: (carRental isCarRented: blueGolf startDate: (Date newDay: 5 month: 5 year: 2020) days: bobRentDurationInDays) equals: true.	 Transcript clear.	 aDicsountRelatedMessage := carRental printAvailableCarsForPeriod: bobStartingDate days: bobRentDurationInDays.	 "One can override the discount related message if needed"	 Transcript show: aDicsountRelatedMessage; cr.	 Transcript show: 'Have a nice jorney!!'.	! !